/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IERC2917Interface extends ethers.utils.Interface {
  functions: {
    "changeInterestRatePerBlock(uint256)": FunctionFragment;
    "decreaseProductivity(address,uint256)": FunctionFragment;
    "getProductivity(address)": FunctionFragment;
    "increaseProductivity(address,uint256)": FunctionFragment;
    "initialize()": FunctionFragment;
    "interestsPerBlock()": FunctionFragment;
    "mint()": FunctionFragment;
    "setImplementor(address)": FunctionFragment;
    "take()": FunctionFragment;
    "takeWithBlock()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "changeInterestRatePerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseProductivity",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductivity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseProductivity",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "interestsPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setImplementor",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "take", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "takeWithBlock",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "changeInterestRatePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseProductivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseProductivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestsPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setImplementor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "take", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "takeWithBlock",
    data: BytesLike
  ): Result;

  events: {
    "InterestRatePerBlockChanged(uint256,uint256)": EventFragment;
    "ProductivityDecreased(address,uint256)": EventFragment;
    "ProductivityIncreased(address,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "InterestRatePerBlockChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductivityDecreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductivityIncreased"): EventFragment;
}

export class IERC2917 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IERC2917Interface;

  functions: {
    changeInterestRatePerBlock(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "changeInterestRatePerBlock(uint256)"(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseProductivity(
      user: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "decreaseProductivity(address,uint256)"(
      user: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getProductivity(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "getProductivity(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    increaseProductivity(
      user: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "increaseProductivity(address,uint256)"(
      user: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    interestsPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "interestsPerBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mint()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setImplementor(
      newImplementor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setImplementor(address)"(
      newImplementor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    take(overrides?: CallOverrides): Promise<[BigNumber]>;

    "take()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    takeWithBlock(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    "takeWithBlock()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;
  };

  changeInterestRatePerBlock(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "changeInterestRatePerBlock(uint256)"(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseProductivity(
    user: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "decreaseProductivity(address,uint256)"(
    user: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getProductivity(
    user: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "getProductivity(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  increaseProductivity(
    user: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "increaseProductivity(address,uint256)"(
    user: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  interestsPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "interestsPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mint()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setImplementor(
    newImplementor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setImplementor(address)"(
    newImplementor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  take(overrides?: CallOverrides): Promise<BigNumber>;

  "take()"(overrides?: CallOverrides): Promise<BigNumber>;

  takeWithBlock(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  "takeWithBlock()"(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  callStatic: {
    changeInterestRatePerBlock(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "changeInterestRatePerBlock(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decreaseProductivity(
      user: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber, BigNumber]>;

    "decreaseProductivity(address,uint256)"(
      user: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber, BigNumber]>;

    getProductivity(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "getProductivity(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    increaseProductivity(
      user: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber, BigNumber]>;

    "increaseProductivity(address,uint256)"(
      user: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber, BigNumber]>;

    initialize(overrides?: CallOverrides): Promise<void>;

    "initialize()"(overrides?: CallOverrides): Promise<void>;

    interestsPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "interestsPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(overrides?: CallOverrides): Promise<BigNumber>;

    "mint()"(overrides?: CallOverrides): Promise<BigNumber>;

    setImplementor(
      newImplementor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setImplementor(address)"(
      newImplementor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    take(overrides?: CallOverrides): Promise<BigNumber>;

    "take()"(overrides?: CallOverrides): Promise<BigNumber>;

    takeWithBlock(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    "takeWithBlock()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;
  };

  filters: {
    InterestRatePerBlockChanged(
      oldValue: null,
      newValue: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldValue: BigNumber; newValue: BigNumber }
    >;

    ProductivityDecreased(
      user: string | null,
      value: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; value: BigNumber }
    >;

    ProductivityIncreased(
      user: string | null,
      value: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; value: BigNumber }
    >;
  };

  estimateGas: {
    changeInterestRatePerBlock(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "changeInterestRatePerBlock(uint256)"(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseProductivity(
      user: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "decreaseProductivity(address,uint256)"(
      user: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getProductivity(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProductivity(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseProductivity(
      user: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "increaseProductivity(address,uint256)"(
      user: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    interestsPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "interestsPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mint()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setImplementor(
      newImplementor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setImplementor(address)"(
      newImplementor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    take(overrides?: CallOverrides): Promise<BigNumber>;

    "take()"(overrides?: CallOverrides): Promise<BigNumber>;

    takeWithBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "takeWithBlock()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    changeInterestRatePerBlock(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "changeInterestRatePerBlock(uint256)"(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseProductivity(
      user: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "decreaseProductivity(address,uint256)"(
      user: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getProductivity(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProductivity(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseProductivity(
      user: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "increaseProductivity(address,uint256)"(
      user: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    interestsPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "interestsPerBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mint()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setImplementor(
      newImplementor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setImplementor(address)"(
      newImplementor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    take(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "take()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    takeWithBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "takeWithBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
