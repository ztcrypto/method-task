/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface UniStakerInterface extends ethers.utils.Interface {
  functions: {
    "BLACK()": FunctionFragment;
    "BLACK_LM_REWARD_MULTIPLIER_DENOM()": FunctionFragment;
    "BLACK_LM_REWARD_MULTIPLIER_NUM()": FunctionFragment;
    "GOLD()": FunctionFragment;
    "GOLD_LM_REWARD_MULTIPLIER_DENOM()": FunctionFragment;
    "GOLD_LM_REWARD_MULTIPLIER_NUM()": FunctionFragment;
    "LM_REWARD_VESTING_PERIOD()": FunctionFragment;
    "LM_REWARD_VESTING_PORTION_DENOM()": FunctionFragment;
    "LM_REWARD_VESTING_PORTION_NUM()": FunctionFragment;
    "MAX_BONUS_TOKENS()": FunctionFragment;
    "MAX_TOKENS_STAKED_PER_VAULT()": FunctionFragment;
    "MINT()": FunctionFragment;
    "MINT_LM_REWARD_MULTIPLIER_DENOM()": FunctionFragment;
    "MINT_LM_REWARD_MULTIPLIER_NUM()": FunctionFragment;
    "MIN_AIRDROP_REWARD_CLAIM_FREQUENCY()": FunctionFragment;
    "PLATINUM()": FunctionFragment;
    "PLATINUM_LM_REWARD_MULTIPLIER_DENOM()": FunctionFragment;
    "PLATINUM_LM_REWARD_MULTIPLIER_NUM()": FunctionFragment;
    "activeRewardCalcTemplate()": FunctionFragment;
    "addBonusTokenToLMRewards(address,address,uint256)": FunctionFragment;
    "addRewardCalcTemplate(string,address)": FunctionFragment;
    "balancesRequiredToClaim(string)": FunctionFragment;
    "calculateAirdropReward(address,uint256[])": FunctionFragment;
    "claimAirdropReward(address,uint256[])": FunctionFragment;
    "claimVestedReward()": FunctionFragment;
    "earnedLMRewards(address,address)": FunctionFragment;
    "endLMRewards(address,bool)": FunctionFragment;
    "fund(address,uint256)": FunctionFragment;
    "getBonusTokenAtIndex(uint256)": FunctionFragment;
    "getBonusTokenSetLength()": FunctionFragment;
    "getLMRewardBonusTokenAt(address,uint256)": FunctionFragment;
    "getLMRewardBonusTokensLength(address)": FunctionFragment;
    "getLMRewardData(address)": FunctionFragment;
    "getLMRewardVestingData(address,address,uint256)": FunctionFragment;
    "getNftTier(uint256,address)": FunctionFragment;
    "getNftsOfOwner(address,address)": FunctionFragment;
    "getNumTokensStaked()": FunctionFragment;
    "getNumTokensStakedInVault(address)": FunctionFragment;
    "getNumVaults()": FunctionFragment;
    "getNumVestingLMTokenRewards(address)": FunctionFragment;
    "getNumVests(address,address)": FunctionFragment;
    "getPowerController()": FunctionFragment;
    "getPowerSwitch()": FunctionFragment;
    "getTokenStakedAt(uint256)": FunctionFragment;
    "getVaultAt(uint256)": FunctionFragment;
    "getVaultFactoryAtIndex(uint256)": FunctionFragment;
    "getVaultFactorySetLength()": FunctionFragment;
    "getVaultTokenAtIndex(address,uint256)": FunctionFragment;
    "getVaultTokenStake(address,address)": FunctionFragment;
    "getVestingLMTokenAt(address,uint256)": FunctionFragment;
    "isOffline()": FunctionFragment;
    "isOnline()": FunctionFragment;
    "isShutdown()": FunctionFragment;
    "isValidAddress(address)": FunctionFragment;
    "isValidVault(address,address)": FunctionFragment;
    "nftLastClaimedRewardAt(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "rageQuit()": FunctionFragment;
    "registerBonusToken(address)": FunctionFragment;
    "registerVaultFactory(address)": FunctionFragment;
    "removeBonusToken(address)": FunctionFragment;
    "removeVaultFactory(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rescueTokensFromRewardPool(address,address,uint256)": FunctionFragment;
    "rewardCalcTemplateNames(uint256)": FunctionFragment;
    "rewardCalcTemplates(string)": FunctionFragment;
    "rewardPool()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "setBalanceRequiredToClaim(string,uint256)": FunctionFragment;
    "setBlackLMRewardMultiplier(uint256,uint256)": FunctionFragment;
    "setGoldLMRewardMultiplier(uint256,uint256)": FunctionFragment;
    "setImplementorForRewardsCalculator(address,address)": FunctionFragment;
    "setLMRewardVestingPeriod(uint256)": FunctionFragment;
    "setLMRewardVestingPortion(uint256,uint256)": FunctionFragment;
    "setLMRewardsPerBlock(address,uint256)": FunctionFragment;
    "setMaxBonusTokens(uint256)": FunctionFragment;
    "setMaxStakesPerVault(uint256)": FunctionFragment;
    "setMinRewardClaimFrequency(uint256)": FunctionFragment;
    "setMintLMRewardMultiplier(uint256,uint256)": FunctionFragment;
    "setPlatinumLMRewardMultiplier(uint256,uint256)": FunctionFragment;
    "setRewardCalcActiveTemplate(string)": FunctionFragment;
    "setWeeklyAirdropAmount(string,uint256)": FunctionFragment;
    "stake(address,address,address,uint256,bytes)": FunctionFragment;
    "stakedTokenTotal(address)": FunctionFragment;
    "startLMRewards(address,uint256,uint256,string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstakeAndClaim(address,address,address,address,uint256,bool,bytes)": FunctionFragment;
    "vestingLMRewards(address,address,uint256)": FunctionFragment;
    "weeklyAirdropAmounts(string)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BLACK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "BLACK_LM_REWARD_MULTIPLIER_DENOM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BLACK_LM_REWARD_MULTIPLIER_NUM",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "GOLD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "GOLD_LM_REWARD_MULTIPLIER_DENOM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GOLD_LM_REWARD_MULTIPLIER_NUM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LM_REWARD_VESTING_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LM_REWARD_VESTING_PORTION_DENOM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LM_REWARD_VESTING_PORTION_NUM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_BONUS_TOKENS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_TOKENS_STAKED_PER_VAULT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MINT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MINT_LM_REWARD_MULTIPLIER_DENOM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINT_LM_REWARD_MULTIPLIER_NUM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_AIRDROP_REWARD_CLAIM_FREQUENCY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PLATINUM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PLATINUM_LM_REWARD_MULTIPLIER_DENOM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PLATINUM_LM_REWARD_MULTIPLIER_NUM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeRewardCalcTemplate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addBonusTokenToLMRewards",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addRewardCalcTemplate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "balancesRequiredToClaim",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateAirdropReward",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAirdropReward",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimVestedReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "earnedLMRewards",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "endLMRewards",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "fund",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBonusTokenAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBonusTokenSetLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLMRewardBonusTokenAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLMRewardBonusTokensLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLMRewardData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLMRewardVestingData",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNftTier",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNftsOfOwner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumTokensStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumTokensStakedInVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumVaults",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumVestingLMTokenRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumVests",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPowerController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPowerSwitch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenStakedAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultFactoryAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultFactorySetLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultTokenAtIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultTokenStake",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingLMTokenAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isOffline", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOnline", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isValidAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidVault",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "nftLastClaimedRewardAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "rageQuit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerBonusToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerVaultFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBonusToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVaultFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescueTokensFromRewardPool",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardCalcTemplateNames",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardCalcTemplates",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBalanceRequiredToClaim",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlackLMRewardMultiplier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGoldLMRewardMultiplier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setImplementorForRewardsCalculator",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLMRewardVestingPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLMRewardVestingPortion",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLMRewardsPerBlock",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxBonusTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxStakesPerVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinRewardClaimFrequency",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintLMRewardMultiplier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatinumLMRewardMultiplier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardCalcActiveTemplate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWeeklyAirdropAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [string, string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedTokenTotal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "startLMRewards",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeAndClaim",
    values: [string, string, string, string, BigNumberish, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingLMRewards",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "weeklyAirdropAmounts",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "BLACK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BLACK_LM_REWARD_MULTIPLIER_DENOM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BLACK_LM_REWARD_MULTIPLIER_NUM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "GOLD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "GOLD_LM_REWARD_MULTIPLIER_DENOM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GOLD_LM_REWARD_MULTIPLIER_NUM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LM_REWARD_VESTING_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LM_REWARD_VESTING_PORTION_DENOM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LM_REWARD_VESTING_PORTION_NUM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_BONUS_TOKENS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_TOKENS_STAKED_PER_VAULT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MINT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MINT_LM_REWARD_MULTIPLIER_DENOM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINT_LM_REWARD_MULTIPLIER_NUM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_AIRDROP_REWARD_CLAIM_FREQUENCY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PLATINUM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PLATINUM_LM_REWARD_MULTIPLIER_DENOM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PLATINUM_LM_REWARD_MULTIPLIER_NUM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeRewardCalcTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBonusTokenToLMRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRewardCalcTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balancesRequiredToClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateAirdropReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAirdropReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimVestedReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earnedLMRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endLMRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBonusTokenAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBonusTokenSetLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLMRewardBonusTokenAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLMRewardBonusTokensLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLMRewardData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLMRewardVestingData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNftTier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNftsOfOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumTokensStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumTokensStakedInVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumVestingLMTokenRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumVests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPowerController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPowerSwitch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenStakedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVaultAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVaultFactoryAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultFactorySetLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultTokenAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultTokenStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingLMTokenAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOffline", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOnline", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isShutdown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftLastClaimedRewardAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rageQuit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerBonusToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBonusToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueTokensFromRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardCalcTemplateNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardCalcTemplates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBalanceRequiredToClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlackLMRewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGoldLMRewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setImplementorForRewardsCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLMRewardVestingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLMRewardVestingPortion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLMRewardsPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxBonusTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxStakesPerVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinRewardClaimFrequency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintLMRewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatinumLMRewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardCalcActiveTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWeeklyAirdropAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakedTokenTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startLMRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeAndClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingLMRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weeklyAirdropAmounts",
    data: BytesLike
  ): Result;

  events: {
    "BonusTokenRegistered(address)": EventFragment;
    "BonusTokenRemoved(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RageQuit(address)": EventFragment;
    "RewardCalcTemplateActive(string,address)": EventFragment;
    "RewardCalcTemplateAdded(string,address)": EventFragment;
    "RewardClaimed(address,address,address,uint256)": EventFragment;
    "Staked(address,uint256)": EventFragment;
    "UniStakerCreated(address,address)": EventFragment;
    "UniStakerFunded(address,uint256)": EventFragment;
    "Unstaked(address,uint256)": EventFragment;
    "VaultFactoryRegistered(address)": EventFragment;
    "VaultFactoryRemoved(address)": EventFragment;
    "VestedRewardClaimed(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BonusTokenRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BonusTokenRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RageQuit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardCalcTemplateActive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardCalcTemplateAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UniStakerCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UniStakerFunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultFactoryRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultFactoryRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VestedRewardClaimed"): EventFragment;
}

export class UniStaker extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: UniStakerInterface;

  functions: {
    BLACK(overrides?: CallOverrides): Promise<[string]>;

    "BLACK()"(overrides?: CallOverrides): Promise<[string]>;

    BLACK_LM_REWARD_MULTIPLIER_DENOM(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "BLACK_LM_REWARD_MULTIPLIER_DENOM()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    BLACK_LM_REWARD_MULTIPLIER_NUM(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "BLACK_LM_REWARD_MULTIPLIER_NUM()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    GOLD(overrides?: CallOverrides): Promise<[string]>;

    "GOLD()"(overrides?: CallOverrides): Promise<[string]>;

    GOLD_LM_REWARD_MULTIPLIER_DENOM(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "GOLD_LM_REWARD_MULTIPLIER_DENOM()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    GOLD_LM_REWARD_MULTIPLIER_NUM(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "GOLD_LM_REWARD_MULTIPLIER_NUM()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    LM_REWARD_VESTING_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    "LM_REWARD_VESTING_PERIOD()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    LM_REWARD_VESTING_PORTION_DENOM(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "LM_REWARD_VESTING_PORTION_DENOM()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    LM_REWARD_VESTING_PORTION_NUM(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "LM_REWARD_VESTING_PORTION_NUM()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MAX_BONUS_TOKENS(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_BONUS_TOKENS()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_TOKENS_STAKED_PER_VAULT(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "MAX_TOKENS_STAKED_PER_VAULT()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MINT(overrides?: CallOverrides): Promise<[string]>;

    "MINT()"(overrides?: CallOverrides): Promise<[string]>;

    MINT_LM_REWARD_MULTIPLIER_DENOM(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "MINT_LM_REWARD_MULTIPLIER_DENOM()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MINT_LM_REWARD_MULTIPLIER_NUM(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "MINT_LM_REWARD_MULTIPLIER_NUM()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MIN_AIRDROP_REWARD_CLAIM_FREQUENCY(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "MIN_AIRDROP_REWARD_CLAIM_FREQUENCY()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    PLATINUM(overrides?: CallOverrides): Promise<[string]>;

    "PLATINUM()"(overrides?: CallOverrides): Promise<[string]>;

    PLATINUM_LM_REWARD_MULTIPLIER_DENOM(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "PLATINUM_LM_REWARD_MULTIPLIER_DENOM()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    PLATINUM_LM_REWARD_MULTIPLIER_NUM(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "PLATINUM_LM_REWARD_MULTIPLIER_NUM()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    activeRewardCalcTemplate(overrides?: CallOverrides): Promise<[string]>;

    "activeRewardCalcTemplate()"(overrides?: CallOverrides): Promise<[string]>;

    addBonusTokenToLMRewards(
      lmToken: string,
      bonusToken: string,
      bonusTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addBonusTokenToLMRewards(address,address,uint256)"(
      lmToken: string,
      bonusToken: string,
      bonusTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addRewardCalcTemplate(
      name: string,
      template: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addRewardCalcTemplate(string,address)"(
      name: string,
      template: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balancesRequiredToClaim(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balancesRequiredToClaim(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateAirdropReward(address,uint256[])"(
      nftFactory: string,
      nftIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        balanceRequiredToClaim: BigNumber;
        balanceLocked: BigNumber;
      }
    >;

    "calculateAirdropReward(address,uint256)"(
      nftFactory: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        balanceRequiredToClaim: BigNumber;
        balanceLocked: BigNumber;
      }
    >;

    "calculateAirdropReward(address,address)"(
      owner: string,
      nftFactory: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        balanceRequiredToClaim: BigNumber;
        balanceLocked: BigNumber;
      }
    >;

    "claimAirdropReward(address,uint256[])"(
      nftFactory: string,
      nftIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimAirdropReward(address)"(
      nftFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimVestedReward()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimVestedReward(address,uint256)"(
      token: string,
      numVests: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimVestedReward(address)"(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    earnedLMRewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "earnedLMRewards(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    endLMRewards(
      token: string,
      removeBonusTokenData: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "endLMRewards(address,bool)"(
      token: string,
      removeBonusTokenData: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fund(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "fund(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBonusTokenAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { bonusToken: string }>;

    "getBonusTokenAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { bonusToken: string }>;

    getBonusTokenSetLength(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { length: BigNumber }>;

    "getBonusTokenSetLength()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { length: BigNumber }>;

    getLMRewardBonusTokenAt(
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { bonusToken: string; bonusTokenAmount: BigNumber }
    >;

    "getLMRewardBonusTokenAt(address,uint256)"(
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { bonusToken: string; bonusTokenAmount: BigNumber }
    >;

    getLMRewardBonusTokensLength(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { length: BigNumber }>;

    "getLMRewardBonusTokensLength(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { length: BigNumber }>;

    getLMRewardData(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        amount: BigNumber;
        duration: BigNumber;
        startedAt: BigNumber;
        rewardCalcInstance: string;
      }
    >;

    "getLMRewardData(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        amount: BigNumber;
        duration: BigNumber;
        startedAt: BigNumber;
        rewardCalcInstance: string;
      }
    >;

    getLMRewardVestingData(
      user: string,
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; startedAt: BigNumber }
    >;

    "getLMRewardVestingData(address,address,uint256)"(
      user: string,
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; startedAt: BigNumber }
    >;

    getNftTier(
      nftId: BigNumberish,
      nftFactory: string,
      overrides?: CallOverrides
    ): Promise<[string] & { tier: string }>;

    "getNftTier(uint256,address)"(
      nftId: BigNumberish,
      nftFactory: string,
      overrides?: CallOverrides
    ): Promise<[string] & { tier: string }>;

    getNftsOfOwner(
      owner: string,
      nftFactory: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { nftIds: BigNumber[] }>;

    "getNftsOfOwner(address,address)"(
      owner: string,
      nftFactory: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { nftIds: BigNumber[] }>;

    getNumTokensStaked(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { num: BigNumber }>;

    "getNumTokensStaked()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { num: BigNumber }>;

    getNumTokensStakedInVault(
      vault: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { num: BigNumber }>;

    "getNumTokensStakedInVault(address)"(
      vault: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { num: BigNumber }>;

    getNumVaults(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { num: BigNumber }>;

    "getNumVaults()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { num: BigNumber }>;

    getNumVestingLMTokenRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { num: BigNumber }>;

    "getNumVestingLMTokenRewards(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { num: BigNumber }>;

    getNumVests(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { num: BigNumber }>;

    "getNumVests(address,address)"(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { num: BigNumber }>;

    getPowerController(
      overrides?: CallOverrides
    ): Promise<[string] & { controller: string }>;

    "getPowerController()"(
      overrides?: CallOverrides
    ): Promise<[string] & { controller: string }>;

    getPowerSwitch(
      overrides?: CallOverrides
    ): Promise<[string] & { powerSwitch: string }>;

    "getPowerSwitch()"(
      overrides?: CallOverrides
    ): Promise<[string] & { powerSwitch: string }>;

    getTokenStakedAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { token: string }>;

    "getTokenStakedAt(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { token: string }>;

    getVaultAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { vault: string }>;

    "getVaultAt(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { vault: string }>;

    getVaultFactoryAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { factory: string }>;

    "getVaultFactoryAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { factory: string }>;

    getVaultFactorySetLength(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { length: BigNumber }>;

    "getVaultFactorySetLength()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { length: BigNumber }>;

    getVaultTokenAtIndex(
      vault: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { vaultToken: string }>;

    "getVaultTokenAtIndex(address,uint256)"(
      vault: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { vaultToken: string }>;

    getVaultTokenStake(
      vault: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenStake: BigNumber }>;

    "getVaultTokenStake(address,address)"(
      vault: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenStake: BigNumber }>;

    getVestingLMTokenAt(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { token: string }>;

    "getVestingLMTokenAt(address,uint256)"(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { token: string }>;

    isOffline(
      overrides?: CallOverrides
    ): Promise<[boolean] & { status: boolean }>;

    "isOffline()"(
      overrides?: CallOverrides
    ): Promise<[boolean] & { status: boolean }>;

    isOnline(
      overrides?: CallOverrides
    ): Promise<[boolean] & { status: boolean }>;

    "isOnline()"(
      overrides?: CallOverrides
    ): Promise<[boolean] & { status: boolean }>;

    isShutdown(
      overrides?: CallOverrides
    ): Promise<[boolean] & { status: boolean }>;

    "isShutdown()"(
      overrides?: CallOverrides
    ): Promise<[boolean] & { status: boolean }>;

    isValidAddress(
      target: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { validity: boolean }>;

    "isValidAddress(address)"(
      target: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { validity: boolean }>;

    isValidVault(
      vault: string,
      factory: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { validity: boolean }>;

    "isValidVault(address,address)"(
      vault: string,
      factory: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { validity: boolean }>;

    nftLastClaimedRewardAt(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "nftLastClaimedRewardAt(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    rageQuit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "rageQuit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerBonusToken(
      bonusToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "registerBonusToken(address)"(
      bonusToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerVaultFactory(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "registerVaultFactory(address)"(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeBonusToken(
      bonusToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeBonusToken(address)"(
      bonusToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeVaultFactory(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeVaultFactory(address)"(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rescueTokensFromRewardPool(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "rescueTokensFromRewardPool(address,address,uint256)"(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardCalcTemplateNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "rewardCalcTemplateNames(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rewardCalcTemplates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "rewardCalcTemplates(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rewardPool(overrides?: CallOverrides): Promise<[string]>;

    "rewardPool()"(overrides?: CallOverrides): Promise<[string]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    "rewardToken()"(overrides?: CallOverrides): Promise<[string]>;

    setBalanceRequiredToClaim(
      tier: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setBalanceRequiredToClaim(string,uint256)"(
      tier: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBlackLMRewardMultiplier(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setBlackLMRewardMultiplier(uint256,uint256)"(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGoldLMRewardMultiplier(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setGoldLMRewardMultiplier(uint256,uint256)"(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setImplementorForRewardsCalculator(
      token: string,
      newImplementor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setImplementorForRewardsCalculator(address,address)"(
      token: string,
      newImplementor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLMRewardVestingPeriod(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLMRewardVestingPeriod(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLMRewardVestingPortion(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLMRewardVestingPortion(uint256,uint256)"(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLMRewardsPerBlock(
      token: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLMRewardsPerBlock(address,uint256)"(
      token: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxBonusTokens(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMaxBonusTokens(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxStakesPerVault(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMaxStakesPerVault(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinRewardClaimFrequency(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMinRewardClaimFrequency(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMintLMRewardMultiplier(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMintLMRewardMultiplier(uint256,uint256)"(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlatinumLMRewardMultiplier(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPlatinumLMRewardMultiplier(uint256,uint256)"(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardCalcActiveTemplate(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRewardCalcActiveTemplate(string)"(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWeeklyAirdropAmount(
      tier: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setWeeklyAirdropAmount(string,uint256)"(
      tier: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      vault: string,
      vaultFactory: string,
      token: string,
      amount: BigNumberish,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stake(address,address,address,uint256,bytes)"(
      vault: string,
      vaultFactory: string,
      token: string,
      amount: BigNumberish,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakedTokenTotal(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "stakedTokenTotal(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "startLMRewards(address,uint256,uint256,string)"(
      token: string,
      amount: BigNumberish,
      duration: BigNumberish,
      rewardCalcTemplateName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "startLMRewards(address,uint256,uint256)"(
      token: string,
      amount: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeAndClaim(
      vault: string,
      vaultFactory: string,
      recipient: string,
      token: string,
      amount: BigNumberish,
      claimBonusReward: boolean,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unstakeAndClaim(address,address,address,address,uint256,bool,bytes)"(
      vault: string,
      vaultFactory: string,
      recipient: string,
      token: string,
      amount: BigNumberish,
      claimBonusReward: boolean,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vestingLMRewards(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; startedAt: BigNumber }
    >;

    "vestingLMRewards(address,address,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; startedAt: BigNumber }
    >;

    weeklyAirdropAmounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "weeklyAirdropAmounts(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  BLACK(overrides?: CallOverrides): Promise<string>;

  "BLACK()"(overrides?: CallOverrides): Promise<string>;

  BLACK_LM_REWARD_MULTIPLIER_DENOM(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "BLACK_LM_REWARD_MULTIPLIER_DENOM()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  BLACK_LM_REWARD_MULTIPLIER_NUM(overrides?: CallOverrides): Promise<BigNumber>;

  "BLACK_LM_REWARD_MULTIPLIER_NUM()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  GOLD(overrides?: CallOverrides): Promise<string>;

  "GOLD()"(overrides?: CallOverrides): Promise<string>;

  GOLD_LM_REWARD_MULTIPLIER_DENOM(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "GOLD_LM_REWARD_MULTIPLIER_DENOM()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  GOLD_LM_REWARD_MULTIPLIER_NUM(overrides?: CallOverrides): Promise<BigNumber>;

  "GOLD_LM_REWARD_MULTIPLIER_NUM()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  LM_REWARD_VESTING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  "LM_REWARD_VESTING_PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

  LM_REWARD_VESTING_PORTION_DENOM(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "LM_REWARD_VESTING_PORTION_DENOM()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  LM_REWARD_VESTING_PORTION_NUM(overrides?: CallOverrides): Promise<BigNumber>;

  "LM_REWARD_VESTING_PORTION_NUM()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  MAX_BONUS_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_BONUS_TOKENS()"(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_TOKENS_STAKED_PER_VAULT(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_TOKENS_STAKED_PER_VAULT()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  MINT(overrides?: CallOverrides): Promise<string>;

  "MINT()"(overrides?: CallOverrides): Promise<string>;

  MINT_LM_REWARD_MULTIPLIER_DENOM(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "MINT_LM_REWARD_MULTIPLIER_DENOM()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  MINT_LM_REWARD_MULTIPLIER_NUM(overrides?: CallOverrides): Promise<BigNumber>;

  "MINT_LM_REWARD_MULTIPLIER_NUM()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  MIN_AIRDROP_REWARD_CLAIM_FREQUENCY(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "MIN_AIRDROP_REWARD_CLAIM_FREQUENCY()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  PLATINUM(overrides?: CallOverrides): Promise<string>;

  "PLATINUM()"(overrides?: CallOverrides): Promise<string>;

  PLATINUM_LM_REWARD_MULTIPLIER_DENOM(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "PLATINUM_LM_REWARD_MULTIPLIER_DENOM()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  PLATINUM_LM_REWARD_MULTIPLIER_NUM(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "PLATINUM_LM_REWARD_MULTIPLIER_NUM()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  activeRewardCalcTemplate(overrides?: CallOverrides): Promise<string>;

  "activeRewardCalcTemplate()"(overrides?: CallOverrides): Promise<string>;

  addBonusTokenToLMRewards(
    lmToken: string,
    bonusToken: string,
    bonusTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addBonusTokenToLMRewards(address,address,uint256)"(
    lmToken: string,
    bonusToken: string,
    bonusTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addRewardCalcTemplate(
    name: string,
    template: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addRewardCalcTemplate(string,address)"(
    name: string,
    template: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balancesRequiredToClaim(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balancesRequiredToClaim(string)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateAirdropReward(address,uint256[])"(
    nftFactory: string,
    nftIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      balanceRequiredToClaim: BigNumber;
      balanceLocked: BigNumber;
    }
  >;

  "calculateAirdropReward(address,uint256)"(
    nftFactory: string,
    nftId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      balanceRequiredToClaim: BigNumber;
      balanceLocked: BigNumber;
    }
  >;

  "calculateAirdropReward(address,address)"(
    owner: string,
    nftFactory: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      balanceRequiredToClaim: BigNumber;
      balanceLocked: BigNumber;
    }
  >;

  "claimAirdropReward(address,uint256[])"(
    nftFactory: string,
    nftIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimAirdropReward(address)"(
    nftFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimVestedReward()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimVestedReward(address,uint256)"(
    token: string,
    numVests: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimVestedReward(address)"(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  earnedLMRewards(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "earnedLMRewards(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  endLMRewards(
    token: string,
    removeBonusTokenData: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "endLMRewards(address,bool)"(
    token: string,
    removeBonusTokenData: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fund(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "fund(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBonusTokenAtIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getBonusTokenAtIndex(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getBonusTokenSetLength(overrides?: CallOverrides): Promise<BigNumber>;

  "getBonusTokenSetLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  getLMRewardBonusTokenAt(
    token: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { bonusToken: string; bonusTokenAmount: BigNumber }
  >;

  "getLMRewardBonusTokenAt(address,uint256)"(
    token: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { bonusToken: string; bonusTokenAmount: BigNumber }
  >;

  getLMRewardBonusTokensLength(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getLMRewardBonusTokensLength(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLMRewardData(
    token: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string] & {
      amount: BigNumber;
      duration: BigNumber;
      startedAt: BigNumber;
      rewardCalcInstance: string;
    }
  >;

  "getLMRewardData(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string] & {
      amount: BigNumber;
      duration: BigNumber;
      startedAt: BigNumber;
      rewardCalcInstance: string;
    }
  >;

  getLMRewardVestingData(
    user: string,
    token: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; startedAt: BigNumber }
  >;

  "getLMRewardVestingData(address,address,uint256)"(
    user: string,
    token: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; startedAt: BigNumber }
  >;

  getNftTier(
    nftId: BigNumberish,
    nftFactory: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getNftTier(uint256,address)"(
    nftId: BigNumberish,
    nftFactory: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getNftsOfOwner(
    owner: string,
    nftFactory: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getNftsOfOwner(address,address)"(
    owner: string,
    nftFactory: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getNumTokensStaked(overrides?: CallOverrides): Promise<BigNumber>;

  "getNumTokensStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

  getNumTokensStakedInVault(
    vault: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNumTokensStakedInVault(address)"(
    vault: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumVaults(overrides?: CallOverrides): Promise<BigNumber>;

  "getNumVaults()"(overrides?: CallOverrides): Promise<BigNumber>;

  getNumVestingLMTokenRewards(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNumVestingLMTokenRewards(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumVests(
    user: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNumVests(address,address)"(
    user: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPowerController(overrides?: CallOverrides): Promise<string>;

  "getPowerController()"(overrides?: CallOverrides): Promise<string>;

  getPowerSwitch(overrides?: CallOverrides): Promise<string>;

  "getPowerSwitch()"(overrides?: CallOverrides): Promise<string>;

  getTokenStakedAt(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getTokenStakedAt(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getVaultAt(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "getVaultAt(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getVaultFactoryAtIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getVaultFactoryAtIndex(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getVaultFactorySetLength(overrides?: CallOverrides): Promise<BigNumber>;

  "getVaultFactorySetLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  getVaultTokenAtIndex(
    vault: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getVaultTokenAtIndex(address,uint256)"(
    vault: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getVaultTokenStake(
    vault: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getVaultTokenStake(address,address)"(
    vault: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVestingLMTokenAt(
    user: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getVestingLMTokenAt(address,uint256)"(
    user: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isOffline(overrides?: CallOverrides): Promise<boolean>;

  "isOffline()"(overrides?: CallOverrides): Promise<boolean>;

  isOnline(overrides?: CallOverrides): Promise<boolean>;

  "isOnline()"(overrides?: CallOverrides): Promise<boolean>;

  isShutdown(overrides?: CallOverrides): Promise<boolean>;

  "isShutdown()"(overrides?: CallOverrides): Promise<boolean>;

  isValidAddress(target: string, overrides?: CallOverrides): Promise<boolean>;

  "isValidAddress(address)"(
    target: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidVault(
    vault: string,
    factory: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isValidVault(address,address)"(
    vault: string,
    factory: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nftLastClaimedRewardAt(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "nftLastClaimedRewardAt(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  rageQuit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "rageQuit()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerBonusToken(
    bonusToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "registerBonusToken(address)"(
    bonusToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerVaultFactory(
    factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "registerVaultFactory(address)"(
    factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeBonusToken(
    bonusToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeBonusToken(address)"(
    bonusToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeVaultFactory(
    factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeVaultFactory(address)"(
    factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rescueTokensFromRewardPool(
    token: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "rescueTokensFromRewardPool(address,address,uint256)"(
    token: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardCalcTemplateNames(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "rewardCalcTemplateNames(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  rewardCalcTemplates(arg0: string, overrides?: CallOverrides): Promise<string>;

  "rewardCalcTemplates(string)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  rewardPool(overrides?: CallOverrides): Promise<string>;

  "rewardPool()"(overrides?: CallOverrides): Promise<string>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  "rewardToken()"(overrides?: CallOverrides): Promise<string>;

  setBalanceRequiredToClaim(
    tier: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setBalanceRequiredToClaim(string,uint256)"(
    tier: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBlackLMRewardMultiplier(
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setBlackLMRewardMultiplier(uint256,uint256)"(
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGoldLMRewardMultiplier(
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setGoldLMRewardMultiplier(uint256,uint256)"(
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setImplementorForRewardsCalculator(
    token: string,
    newImplementor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setImplementorForRewardsCalculator(address,address)"(
    token: string,
    newImplementor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLMRewardVestingPeriod(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLMRewardVestingPeriod(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLMRewardVestingPortion(
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLMRewardVestingPortion(uint256,uint256)"(
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLMRewardsPerBlock(
    token: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLMRewardsPerBlock(address,uint256)"(
    token: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxBonusTokens(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMaxBonusTokens(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxStakesPerVault(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMaxStakesPerVault(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinRewardClaimFrequency(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMinRewardClaimFrequency(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMintLMRewardMultiplier(
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMintLMRewardMultiplier(uint256,uint256)"(
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlatinumLMRewardMultiplier(
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPlatinumLMRewardMultiplier(uint256,uint256)"(
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardCalcActiveTemplate(
    name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRewardCalcActiveTemplate(string)"(
    name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWeeklyAirdropAmount(
    tier: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setWeeklyAirdropAmount(string,uint256)"(
    tier: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    vault: string,
    vaultFactory: string,
    token: string,
    amount: BigNumberish,
    permission: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stake(address,address,address,uint256,bytes)"(
    vault: string,
    vaultFactory: string,
    token: string,
    amount: BigNumberish,
    permission: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakedTokenTotal(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "stakedTokenTotal(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "startLMRewards(address,uint256,uint256,string)"(
    token: string,
    amount: BigNumberish,
    duration: BigNumberish,
    rewardCalcTemplateName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "startLMRewards(address,uint256,uint256)"(
    token: string,
    amount: BigNumberish,
    duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeAndClaim(
    vault: string,
    vaultFactory: string,
    recipient: string,
    token: string,
    amount: BigNumberish,
    claimBonusReward: boolean,
    permission: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unstakeAndClaim(address,address,address,address,uint256,bool,bytes)"(
    vault: string,
    vaultFactory: string,
    recipient: string,
    token: string,
    amount: BigNumberish,
    claimBonusReward: boolean,
    permission: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vestingLMRewards(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; startedAt: BigNumber }
  >;

  "vestingLMRewards(address,address,uint256)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; startedAt: BigNumber }
  >;

  weeklyAirdropAmounts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "weeklyAirdropAmounts(string)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    BLACK(overrides?: CallOverrides): Promise<string>;

    "BLACK()"(overrides?: CallOverrides): Promise<string>;

    BLACK_LM_REWARD_MULTIPLIER_DENOM(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "BLACK_LM_REWARD_MULTIPLIER_DENOM()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    BLACK_LM_REWARD_MULTIPLIER_NUM(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "BLACK_LM_REWARD_MULTIPLIER_NUM()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GOLD(overrides?: CallOverrides): Promise<string>;

    "GOLD()"(overrides?: CallOverrides): Promise<string>;

    GOLD_LM_REWARD_MULTIPLIER_DENOM(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "GOLD_LM_REWARD_MULTIPLIER_DENOM()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GOLD_LM_REWARD_MULTIPLIER_NUM(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "GOLD_LM_REWARD_MULTIPLIER_NUM()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    LM_REWARD_VESTING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    "LM_REWARD_VESTING_PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

    LM_REWARD_VESTING_PORTION_DENOM(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "LM_REWARD_VESTING_PORTION_DENOM()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    LM_REWARD_VESTING_PORTION_NUM(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "LM_REWARD_VESTING_PORTION_NUM()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_BONUS_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_BONUS_TOKENS()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TOKENS_STAKED_PER_VAULT(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_TOKENS_STAKED_PER_VAULT()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MINT(overrides?: CallOverrides): Promise<string>;

    "MINT()"(overrides?: CallOverrides): Promise<string>;

    MINT_LM_REWARD_MULTIPLIER_DENOM(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "MINT_LM_REWARD_MULTIPLIER_DENOM()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MINT_LM_REWARD_MULTIPLIER_NUM(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "MINT_LM_REWARD_MULTIPLIER_NUM()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MIN_AIRDROP_REWARD_CLAIM_FREQUENCY(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "MIN_AIRDROP_REWARD_CLAIM_FREQUENCY()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PLATINUM(overrides?: CallOverrides): Promise<string>;

    "PLATINUM()"(overrides?: CallOverrides): Promise<string>;

    PLATINUM_LM_REWARD_MULTIPLIER_DENOM(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "PLATINUM_LM_REWARD_MULTIPLIER_DENOM()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PLATINUM_LM_REWARD_MULTIPLIER_NUM(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "PLATINUM_LM_REWARD_MULTIPLIER_NUM()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    activeRewardCalcTemplate(overrides?: CallOverrides): Promise<string>;

    "activeRewardCalcTemplate()"(overrides?: CallOverrides): Promise<string>;

    addBonusTokenToLMRewards(
      lmToken: string,
      bonusToken: string,
      bonusTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addBonusTokenToLMRewards(address,address,uint256)"(
      lmToken: string,
      bonusToken: string,
      bonusTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addRewardCalcTemplate(
      name: string,
      template: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addRewardCalcTemplate(string,address)"(
      name: string,
      template: string,
      overrides?: CallOverrides
    ): Promise<void>;

    balancesRequiredToClaim(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balancesRequiredToClaim(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateAirdropReward(address,uint256[])"(
      nftFactory: string,
      nftIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        balanceRequiredToClaim: BigNumber;
        balanceLocked: BigNumber;
      }
    >;

    "calculateAirdropReward(address,uint256)"(
      nftFactory: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        balanceRequiredToClaim: BigNumber;
        balanceLocked: BigNumber;
      }
    >;

    "calculateAirdropReward(address,address)"(
      owner: string,
      nftFactory: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        balanceRequiredToClaim: BigNumber;
        balanceLocked: BigNumber;
      }
    >;

    "claimAirdropReward(address,uint256[])"(
      nftFactory: string,
      nftIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claimAirdropReward(address)"(
      nftFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimVestedReward()"(overrides?: CallOverrides): Promise<void>;

    "claimVestedReward(address,uint256)"(
      token: string,
      numVests: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimVestedReward(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    earnedLMRewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "earnedLMRewards(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endLMRewards(
      token: string,
      removeBonusTokenData: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "endLMRewards(address,bool)"(
      token: string,
      removeBonusTokenData: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    fund(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "fund(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBonusTokenAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getBonusTokenAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getBonusTokenSetLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getBonusTokenSetLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLMRewardBonusTokenAt(
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { bonusToken: string; bonusTokenAmount: BigNumber }
    >;

    "getLMRewardBonusTokenAt(address,uint256)"(
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { bonusToken: string; bonusTokenAmount: BigNumber }
    >;

    getLMRewardBonusTokensLength(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLMRewardBonusTokensLength(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLMRewardData(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        amount: BigNumber;
        duration: BigNumber;
        startedAt: BigNumber;
        rewardCalcInstance: string;
      }
    >;

    "getLMRewardData(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        amount: BigNumber;
        duration: BigNumber;
        startedAt: BigNumber;
        rewardCalcInstance: string;
      }
    >;

    getLMRewardVestingData(
      user: string,
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; startedAt: BigNumber }
    >;

    "getLMRewardVestingData(address,address,uint256)"(
      user: string,
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; startedAt: BigNumber }
    >;

    getNftTier(
      nftId: BigNumberish,
      nftFactory: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getNftTier(uint256,address)"(
      nftId: BigNumberish,
      nftFactory: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getNftsOfOwner(
      owner: string,
      nftFactory: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getNftsOfOwner(address,address)"(
      owner: string,
      nftFactory: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getNumTokensStaked(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumTokensStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNumTokensStakedInVault(
      vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumTokensStakedInVault(address)"(
      vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumVaults(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumVaults()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNumVestingLMTokenRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumVestingLMTokenRewards(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumVests(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumVests(address,address)"(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPowerController(overrides?: CallOverrides): Promise<string>;

    "getPowerController()"(overrides?: CallOverrides): Promise<string>;

    getPowerSwitch(overrides?: CallOverrides): Promise<string>;

    "getPowerSwitch()"(overrides?: CallOverrides): Promise<string>;

    getTokenStakedAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getTokenStakedAt(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getVaultAt(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "getVaultAt(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getVaultFactoryAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getVaultFactoryAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getVaultFactorySetLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getVaultFactorySetLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultTokenAtIndex(
      vault: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getVaultTokenAtIndex(address,uint256)"(
      vault: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getVaultTokenStake(
      vault: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVaultTokenStake(address,address)"(
      vault: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingLMTokenAt(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getVestingLMTokenAt(address,uint256)"(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isOffline(overrides?: CallOverrides): Promise<boolean>;

    "isOffline()"(overrides?: CallOverrides): Promise<boolean>;

    isOnline(overrides?: CallOverrides): Promise<boolean>;

    "isOnline()"(overrides?: CallOverrides): Promise<boolean>;

    isShutdown(overrides?: CallOverrides): Promise<boolean>;

    "isShutdown()"(overrides?: CallOverrides): Promise<boolean>;

    isValidAddress(target: string, overrides?: CallOverrides): Promise<boolean>;

    "isValidAddress(address)"(
      target: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidVault(
      vault: string,
      factory: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isValidVault(address,address)"(
      vault: string,
      factory: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nftLastClaimedRewardAt(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nftLastClaimedRewardAt(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    rageQuit(overrides?: CallOverrides): Promise<void>;

    "rageQuit()"(overrides?: CallOverrides): Promise<void>;

    registerBonusToken(
      bonusToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerBonusToken(address)"(
      bonusToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerVaultFactory(
      factory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerVaultFactory(address)"(
      factory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeBonusToken(
      bonusToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeBonusToken(address)"(
      bonusToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeVaultFactory(
      factory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeVaultFactory(address)"(
      factory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rescueTokensFromRewardPool(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "rescueTokensFromRewardPool(address,address,uint256)"(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardCalcTemplateNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "rewardCalcTemplateNames(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    rewardCalcTemplates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "rewardCalcTemplates(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    rewardPool(overrides?: CallOverrides): Promise<string>;

    "rewardPool()"(overrides?: CallOverrides): Promise<string>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    "rewardToken()"(overrides?: CallOverrides): Promise<string>;

    setBalanceRequiredToClaim(
      tier: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBalanceRequiredToClaim(string,uint256)"(
      tier: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBlackLMRewardMultiplier(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBlackLMRewardMultiplier(uint256,uint256)"(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGoldLMRewardMultiplier(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGoldLMRewardMultiplier(uint256,uint256)"(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setImplementorForRewardsCalculator(
      token: string,
      newImplementor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setImplementorForRewardsCalculator(address,address)"(
      token: string,
      newImplementor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLMRewardVestingPeriod(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLMRewardVestingPeriod(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLMRewardVestingPortion(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLMRewardVestingPortion(uint256,uint256)"(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLMRewardsPerBlock(
      token: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLMRewardsPerBlock(address,uint256)"(
      token: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxBonusTokens(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxBonusTokens(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxStakesPerVault(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxStakesPerVault(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinRewardClaimFrequency(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinRewardClaimFrequency(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintLMRewardMultiplier(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMintLMRewardMultiplier(uint256,uint256)"(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlatinumLMRewardMultiplier(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPlatinumLMRewardMultiplier(uint256,uint256)"(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardCalcActiveTemplate(
      name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRewardCalcActiveTemplate(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWeeklyAirdropAmount(
      tier: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setWeeklyAirdropAmount(string,uint256)"(
      tier: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      vault: string,
      vaultFactory: string,
      token: string,
      amount: BigNumberish,
      permission: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "stake(address,address,address,uint256,bytes)"(
      vault: string,
      vaultFactory: string,
      token: string,
      amount: BigNumberish,
      permission: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    stakedTokenTotal(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakedTokenTotal(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "startLMRewards(address,uint256,uint256,string)"(
      token: string,
      amount: BigNumberish,
      duration: BigNumberish,
      rewardCalcTemplateName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "startLMRewards(address,uint256,uint256)"(
      token: string,
      amount: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeAndClaim(
      vault: string,
      vaultFactory: string,
      recipient: string,
      token: string,
      amount: BigNumberish,
      claimBonusReward: boolean,
      permission: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "unstakeAndClaim(address,address,address,address,uint256,bool,bytes)"(
      vault: string,
      vaultFactory: string,
      recipient: string,
      token: string,
      amount: BigNumberish,
      claimBonusReward: boolean,
      permission: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    vestingLMRewards(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; startedAt: BigNumber }
    >;

    "vestingLMRewards(address,address,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; startedAt: BigNumber }
    >;

    weeklyAirdropAmounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "weeklyAirdropAmounts(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    BonusTokenRegistered(
      token: null
    ): TypedEventFilter<[string], { token: string }>;

    BonusTokenRemoved(
      token: null
    ): TypedEventFilter<[string], { token: string }>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    RageQuit(vault: null): TypedEventFilter<[string], { vault: string }>;

    RewardCalcTemplateActive(
      name: string | null,
      template: string | null
    ): TypedEventFilter<[string, string], { name: string; template: string }>;

    RewardCalcTemplateAdded(
      name: string | null,
      template: string | null
    ): TypedEventFilter<[string, string], { name: string; template: string }>;

    RewardClaimed(
      vaultFactory: null,
      recipient: null,
      token: null,
      amount: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        vaultFactory: string;
        recipient: string;
        token: string;
        amount: BigNumber;
      }
    >;

    Staked(
      vault: null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { vault: string; amount: BigNumber }
    >;

    UniStakerCreated(
      rewardPool: null,
      powerSwitch: null
    ): TypedEventFilter<
      [string, string],
      { rewardPool: string; powerSwitch: string }
    >;

    UniStakerFunded(
      token: null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    Unstaked(
      vault: null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { vault: string; amount: BigNumber }
    >;

    VaultFactoryRegistered(
      factory: null
    ): TypedEventFilter<[string], { factory: string }>;

    VaultFactoryRemoved(
      factory: null
    ): TypedEventFilter<[string], { factory: string }>;

    VestedRewardClaimed(
      recipient: null,
      token: null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { recipient: string; token: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    BLACK(overrides?: CallOverrides): Promise<BigNumber>;

    "BLACK()"(overrides?: CallOverrides): Promise<BigNumber>;

    BLACK_LM_REWARD_MULTIPLIER_DENOM(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "BLACK_LM_REWARD_MULTIPLIER_DENOM()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    BLACK_LM_REWARD_MULTIPLIER_NUM(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "BLACK_LM_REWARD_MULTIPLIER_NUM()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GOLD(overrides?: CallOverrides): Promise<BigNumber>;

    "GOLD()"(overrides?: CallOverrides): Promise<BigNumber>;

    GOLD_LM_REWARD_MULTIPLIER_DENOM(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "GOLD_LM_REWARD_MULTIPLIER_DENOM()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GOLD_LM_REWARD_MULTIPLIER_NUM(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "GOLD_LM_REWARD_MULTIPLIER_NUM()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    LM_REWARD_VESTING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    "LM_REWARD_VESTING_PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

    LM_REWARD_VESTING_PORTION_DENOM(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "LM_REWARD_VESTING_PORTION_DENOM()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    LM_REWARD_VESTING_PORTION_NUM(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "LM_REWARD_VESTING_PORTION_NUM()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_BONUS_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_BONUS_TOKENS()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TOKENS_STAKED_PER_VAULT(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_TOKENS_STAKED_PER_VAULT()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MINT(overrides?: CallOverrides): Promise<BigNumber>;

    "MINT()"(overrides?: CallOverrides): Promise<BigNumber>;

    MINT_LM_REWARD_MULTIPLIER_DENOM(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "MINT_LM_REWARD_MULTIPLIER_DENOM()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MINT_LM_REWARD_MULTIPLIER_NUM(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "MINT_LM_REWARD_MULTIPLIER_NUM()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MIN_AIRDROP_REWARD_CLAIM_FREQUENCY(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "MIN_AIRDROP_REWARD_CLAIM_FREQUENCY()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PLATINUM(overrides?: CallOverrides): Promise<BigNumber>;

    "PLATINUM()"(overrides?: CallOverrides): Promise<BigNumber>;

    PLATINUM_LM_REWARD_MULTIPLIER_DENOM(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "PLATINUM_LM_REWARD_MULTIPLIER_DENOM()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PLATINUM_LM_REWARD_MULTIPLIER_NUM(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "PLATINUM_LM_REWARD_MULTIPLIER_NUM()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    activeRewardCalcTemplate(overrides?: CallOverrides): Promise<BigNumber>;

    "activeRewardCalcTemplate()"(overrides?: CallOverrides): Promise<BigNumber>;

    addBonusTokenToLMRewards(
      lmToken: string,
      bonusToken: string,
      bonusTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addBonusTokenToLMRewards(address,address,uint256)"(
      lmToken: string,
      bonusToken: string,
      bonusTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addRewardCalcTemplate(
      name: string,
      template: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addRewardCalcTemplate(string,address)"(
      name: string,
      template: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balancesRequiredToClaim(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balancesRequiredToClaim(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateAirdropReward(address,uint256[])"(
      nftFactory: string,
      nftIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateAirdropReward(address,uint256)"(
      nftFactory: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateAirdropReward(address,address)"(
      owner: string,
      nftFactory: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimAirdropReward(address,uint256[])"(
      nftFactory: string,
      nftIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimAirdropReward(address)"(
      nftFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimVestedReward()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimVestedReward(address,uint256)"(
      token: string,
      numVests: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimVestedReward(address)"(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    earnedLMRewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "earnedLMRewards(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endLMRewards(
      token: string,
      removeBonusTokenData: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "endLMRewards(address,bool)"(
      token: string,
      removeBonusTokenData: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fund(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "fund(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBonusTokenAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBonusTokenAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBonusTokenSetLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getBonusTokenSetLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLMRewardBonusTokenAt(
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLMRewardBonusTokenAt(address,uint256)"(
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLMRewardBonusTokensLength(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLMRewardBonusTokensLength(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLMRewardData(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLMRewardData(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLMRewardVestingData(
      user: string,
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLMRewardVestingData(address,address,uint256)"(
      user: string,
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNftTier(
      nftId: BigNumberish,
      nftFactory: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNftTier(uint256,address)"(
      nftId: BigNumberish,
      nftFactory: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNftsOfOwner(
      owner: string,
      nftFactory: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNftsOfOwner(address,address)"(
      owner: string,
      nftFactory: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumTokensStaked(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumTokensStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNumTokensStakedInVault(
      vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumTokensStakedInVault(address)"(
      vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumVaults(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumVaults()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNumVestingLMTokenRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumVestingLMTokenRewards(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumVests(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumVests(address,address)"(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPowerController(overrides?: CallOverrides): Promise<BigNumber>;

    "getPowerController()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPowerSwitch(overrides?: CallOverrides): Promise<BigNumber>;

    "getPowerSwitch()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenStakedAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenStakedAt(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVaultAt(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultFactoryAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVaultFactoryAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultFactorySetLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getVaultFactorySetLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultTokenAtIndex(
      vault: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVaultTokenAtIndex(address,uint256)"(
      vault: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultTokenStake(
      vault: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVaultTokenStake(address,address)"(
      vault: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingLMTokenAt(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVestingLMTokenAt(address,uint256)"(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOffline(overrides?: CallOverrides): Promise<BigNumber>;

    "isOffline()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOnline(overrides?: CallOverrides): Promise<BigNumber>;

    "isOnline()"(overrides?: CallOverrides): Promise<BigNumber>;

    isShutdown(overrides?: CallOverrides): Promise<BigNumber>;

    "isShutdown()"(overrides?: CallOverrides): Promise<BigNumber>;

    isValidAddress(
      target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValidAddress(address)"(
      target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidVault(
      vault: string,
      factory: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValidVault(address,address)"(
      vault: string,
      factory: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftLastClaimedRewardAt(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nftLastClaimedRewardAt(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    rageQuit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "rageQuit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerBonusToken(
      bonusToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "registerBonusToken(address)"(
      bonusToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerVaultFactory(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "registerVaultFactory(address)"(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeBonusToken(
      bonusToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeBonusToken(address)"(
      bonusToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeVaultFactory(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeVaultFactory(address)"(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rescueTokensFromRewardPool(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "rescueTokensFromRewardPool(address,address,uint256)"(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardCalcTemplateNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardCalcTemplateNames(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardCalcTemplates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardCalcTemplates(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardPool(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    setBalanceRequiredToClaim(
      tier: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setBalanceRequiredToClaim(string,uint256)"(
      tier: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBlackLMRewardMultiplier(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setBlackLMRewardMultiplier(uint256,uint256)"(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGoldLMRewardMultiplier(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setGoldLMRewardMultiplier(uint256,uint256)"(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setImplementorForRewardsCalculator(
      token: string,
      newImplementor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setImplementorForRewardsCalculator(address,address)"(
      token: string,
      newImplementor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLMRewardVestingPeriod(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLMRewardVestingPeriod(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLMRewardVestingPortion(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLMRewardVestingPortion(uint256,uint256)"(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLMRewardsPerBlock(
      token: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLMRewardsPerBlock(address,uint256)"(
      token: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxBonusTokens(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMaxBonusTokens(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxStakesPerVault(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMaxStakesPerVault(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinRewardClaimFrequency(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMinRewardClaimFrequency(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMintLMRewardMultiplier(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMintLMRewardMultiplier(uint256,uint256)"(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlatinumLMRewardMultiplier(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPlatinumLMRewardMultiplier(uint256,uint256)"(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardCalcActiveTemplate(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRewardCalcActiveTemplate(string)"(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWeeklyAirdropAmount(
      tier: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setWeeklyAirdropAmount(string,uint256)"(
      tier: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      vault: string,
      vaultFactory: string,
      token: string,
      amount: BigNumberish,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stake(address,address,address,uint256,bytes)"(
      vault: string,
      vaultFactory: string,
      token: string,
      amount: BigNumberish,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakedTokenTotal(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakedTokenTotal(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "startLMRewards(address,uint256,uint256,string)"(
      token: string,
      amount: BigNumberish,
      duration: BigNumberish,
      rewardCalcTemplateName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "startLMRewards(address,uint256,uint256)"(
      token: string,
      amount: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeAndClaim(
      vault: string,
      vaultFactory: string,
      recipient: string,
      token: string,
      amount: BigNumberish,
      claimBonusReward: boolean,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unstakeAndClaim(address,address,address,address,uint256,bool,bytes)"(
      vault: string,
      vaultFactory: string,
      recipient: string,
      token: string,
      amount: BigNumberish,
      claimBonusReward: boolean,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vestingLMRewards(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "vestingLMRewards(address,address,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weeklyAirdropAmounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "weeklyAirdropAmounts(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BLACK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BLACK()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BLACK_LM_REWARD_MULTIPLIER_DENOM(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "BLACK_LM_REWARD_MULTIPLIER_DENOM()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BLACK_LM_REWARD_MULTIPLIER_NUM(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "BLACK_LM_REWARD_MULTIPLIER_NUM()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GOLD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "GOLD()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GOLD_LM_REWARD_MULTIPLIER_DENOM(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "GOLD_LM_REWARD_MULTIPLIER_DENOM()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GOLD_LM_REWARD_MULTIPLIER_NUM(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "GOLD_LM_REWARD_MULTIPLIER_NUM()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LM_REWARD_VESTING_PERIOD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "LM_REWARD_VESTING_PERIOD()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LM_REWARD_VESTING_PORTION_DENOM(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "LM_REWARD_VESTING_PORTION_DENOM()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LM_REWARD_VESTING_PORTION_NUM(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "LM_REWARD_VESTING_PORTION_NUM()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_BONUS_TOKENS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_BONUS_TOKENS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_TOKENS_STAKED_PER_VAULT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MAX_TOKENS_STAKED_PER_VAULT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MINT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINT_LM_REWARD_MULTIPLIER_DENOM(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MINT_LM_REWARD_MULTIPLIER_DENOM()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINT_LM_REWARD_MULTIPLIER_NUM(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MINT_LM_REWARD_MULTIPLIER_NUM()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_AIRDROP_REWARD_CLAIM_FREQUENCY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MIN_AIRDROP_REWARD_CLAIM_FREQUENCY()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PLATINUM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PLATINUM()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PLATINUM_LM_REWARD_MULTIPLIER_DENOM(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "PLATINUM_LM_REWARD_MULTIPLIER_DENOM()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PLATINUM_LM_REWARD_MULTIPLIER_NUM(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "PLATINUM_LM_REWARD_MULTIPLIER_NUM()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activeRewardCalcTemplate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "activeRewardCalcTemplate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addBonusTokenToLMRewards(
      lmToken: string,
      bonusToken: string,
      bonusTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addBonusTokenToLMRewards(address,address,uint256)"(
      lmToken: string,
      bonusToken: string,
      bonusTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addRewardCalcTemplate(
      name: string,
      template: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addRewardCalcTemplate(string,address)"(
      name: string,
      template: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balancesRequiredToClaim(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balancesRequiredToClaim(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateAirdropReward(address,uint256[])"(
      nftFactory: string,
      nftIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateAirdropReward(address,uint256)"(
      nftFactory: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateAirdropReward(address,address)"(
      owner: string,
      nftFactory: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimAirdropReward(address,uint256[])"(
      nftFactory: string,
      nftIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimAirdropReward(address)"(
      nftFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimVestedReward()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimVestedReward(address,uint256)"(
      token: string,
      numVests: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimVestedReward(address)"(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    earnedLMRewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "earnedLMRewards(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endLMRewards(
      token: string,
      removeBonusTokenData: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "endLMRewards(address,bool)"(
      token: string,
      removeBonusTokenData: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fund(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "fund(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBonusTokenAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBonusTokenAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBonusTokenSetLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBonusTokenSetLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLMRewardBonusTokenAt(
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLMRewardBonusTokenAt(address,uint256)"(
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLMRewardBonusTokensLength(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLMRewardBonusTokensLength(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLMRewardData(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLMRewardData(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLMRewardVestingData(
      user: string,
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLMRewardVestingData(address,address,uint256)"(
      user: string,
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNftTier(
      nftId: BigNumberish,
      nftFactory: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNftTier(uint256,address)"(
      nftId: BigNumberish,
      nftFactory: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNftsOfOwner(
      owner: string,
      nftFactory: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNftsOfOwner(address,address)"(
      owner: string,
      nftFactory: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumTokensStaked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNumTokensStaked()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumTokensStakedInVault(
      vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNumTokensStakedInVault(address)"(
      vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumVaults(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getNumVaults()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNumVestingLMTokenRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNumVestingLMTokenRewards(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumVests(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNumVests(address,address)"(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPowerController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPowerController()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPowerSwitch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPowerSwitch()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenStakedAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenStakedAt(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVaultAt(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultFactoryAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVaultFactoryAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultFactorySetLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVaultFactorySetLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultTokenAtIndex(
      vault: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVaultTokenAtIndex(address,uint256)"(
      vault: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultTokenStake(
      vault: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVaultTokenStake(address,address)"(
      vault: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingLMTokenAt(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVestingLMTokenAt(address,uint256)"(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOffline(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOffline()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOnline(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOnline()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isShutdown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isShutdown()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidAddress(
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidAddress(address)"(
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidVault(
      vault: string,
      factory: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidVault(address,address)"(
      vault: string,
      factory: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftLastClaimedRewardAt(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nftLastClaimedRewardAt(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rageQuit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "rageQuit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerBonusToken(
      bonusToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "registerBonusToken(address)"(
      bonusToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerVaultFactory(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "registerVaultFactory(address)"(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeBonusToken(
      bonusToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeBonusToken(address)"(
      bonusToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeVaultFactory(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeVaultFactory(address)"(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rescueTokensFromRewardPool(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "rescueTokensFromRewardPool(address,address,uint256)"(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardCalcTemplateNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardCalcTemplateNames(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardCalcTemplates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardCalcTemplates(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBalanceRequiredToClaim(
      tier: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setBalanceRequiredToClaim(string,uint256)"(
      tier: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBlackLMRewardMultiplier(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setBlackLMRewardMultiplier(uint256,uint256)"(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGoldLMRewardMultiplier(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setGoldLMRewardMultiplier(uint256,uint256)"(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setImplementorForRewardsCalculator(
      token: string,
      newImplementor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setImplementorForRewardsCalculator(address,address)"(
      token: string,
      newImplementor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLMRewardVestingPeriod(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLMRewardVestingPeriod(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLMRewardVestingPortion(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLMRewardVestingPortion(uint256,uint256)"(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLMRewardsPerBlock(
      token: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLMRewardsPerBlock(address,uint256)"(
      token: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxBonusTokens(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMaxBonusTokens(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxStakesPerVault(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMaxStakesPerVault(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinRewardClaimFrequency(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMinRewardClaimFrequency(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMintLMRewardMultiplier(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMintLMRewardMultiplier(uint256,uint256)"(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlatinumLMRewardMultiplier(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPlatinumLMRewardMultiplier(uint256,uint256)"(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardCalcActiveTemplate(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRewardCalcActiveTemplate(string)"(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWeeklyAirdropAmount(
      tier: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setWeeklyAirdropAmount(string,uint256)"(
      tier: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      vault: string,
      vaultFactory: string,
      token: string,
      amount: BigNumberish,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stake(address,address,address,uint256,bytes)"(
      vault: string,
      vaultFactory: string,
      token: string,
      amount: BigNumberish,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakedTokenTotal(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakedTokenTotal(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "startLMRewards(address,uint256,uint256,string)"(
      token: string,
      amount: BigNumberish,
      duration: BigNumberish,
      rewardCalcTemplateName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "startLMRewards(address,uint256,uint256)"(
      token: string,
      amount: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeAndClaim(
      vault: string,
      vaultFactory: string,
      recipient: string,
      token: string,
      amount: BigNumberish,
      claimBonusReward: boolean,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unstakeAndClaim(address,address,address,address,uint256,bool,bytes)"(
      vault: string,
      vaultFactory: string,
      recipient: string,
      token: string,
      amount: BigNumberish,
      claimBonusReward: boolean,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vestingLMRewards(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "vestingLMRewards(address,address,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weeklyAirdropAmounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "weeklyAirdropAmounts(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
