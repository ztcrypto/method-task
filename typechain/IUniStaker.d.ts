/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IUniStakerInterface extends ethers.utils.Interface {
  functions: {
    "claimAirdropReward(address,uint256[])": FunctionFragment;
    "claimVestedReward()": FunctionFragment;
    "getBonusTokenAtIndex(uint256)": FunctionFragment;
    "getBonusTokenSetLength()": FunctionFragment;
    "getLMRewardBonusTokenAt(address,uint256)": FunctionFragment;
    "getLMRewardBonusTokensLength(address)": FunctionFragment;
    "getLMRewardData(address)": FunctionFragment;
    "getLMRewardVestingData(address,address,uint256)": FunctionFragment;
    "getNumTokensStaked()": FunctionFragment;
    "getNumTokensStakedInVault(address)": FunctionFragment;
    "getNumVaults()": FunctionFragment;
    "getNumVestingLMTokenRewards(address)": FunctionFragment;
    "getNumVests(address,address)": FunctionFragment;
    "getTokenStakedAt(uint256)": FunctionFragment;
    "getVaultAt(uint256)": FunctionFragment;
    "getVaultFactoryAtIndex(uint256)": FunctionFragment;
    "getVaultFactorySetLength()": FunctionFragment;
    "getVaultTokenAtIndex(address,uint256)": FunctionFragment;
    "getVaultTokenStake(address,address)": FunctionFragment;
    "getVestingLMTokenAt(address,uint256)": FunctionFragment;
    "isValidAddress(address)": FunctionFragment;
    "isValidVault(address,address)": FunctionFragment;
    "rageQuit()": FunctionFragment;
    "stake(address,address,address,uint256,bytes)": FunctionFragment;
    "unstakeAndClaim(address,address,address,address,uint256,bool,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimAirdropReward",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimVestedReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBonusTokenAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBonusTokenSetLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLMRewardBonusTokenAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLMRewardBonusTokensLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLMRewardData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLMRewardVestingData",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumTokensStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumTokensStakedInVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumVaults",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumVestingLMTokenRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumVests",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenStakedAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultFactoryAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultFactorySetLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultTokenAtIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultTokenStake",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingLMTokenAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidVault",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "rageQuit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [string, string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeAndClaim",
    values: [string, string, string, string, BigNumberish, boolean, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimAirdropReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimVestedReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBonusTokenAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBonusTokenSetLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLMRewardBonusTokenAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLMRewardBonusTokensLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLMRewardData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLMRewardVestingData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumTokensStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumTokensStakedInVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumVestingLMTokenRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumVests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenStakedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVaultAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVaultFactoryAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultFactorySetLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultTokenAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultTokenStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingLMTokenAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rageQuit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakeAndClaim",
    data: BytesLike
  ): Result;

  events: {
    "BonusTokenRegistered(address)": EventFragment;
    "BonusTokenRemoved(address)": EventFragment;
    "RageQuit(address)": EventFragment;
    "RewardClaimed(address,address,address,uint256)": EventFragment;
    "Staked(address,uint256)": EventFragment;
    "UniStakerCreated(address,address)": EventFragment;
    "UniStakerFunded(address,uint256)": EventFragment;
    "Unstaked(address,uint256)": EventFragment;
    "VaultFactoryRegistered(address)": EventFragment;
    "VaultFactoryRemoved(address)": EventFragment;
    "VestedRewardClaimed(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BonusTokenRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BonusTokenRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RageQuit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UniStakerCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UniStakerFunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultFactoryRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultFactoryRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VestedRewardClaimed"): EventFragment;
}

export class IUniStaker extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IUniStakerInterface;

  functions: {
    "claimAirdropReward(address,uint256[])"(
      nftFactory: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimAirdropReward(address)"(
      nftFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimVestedReward()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimVestedReward(address)"(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBonusTokenAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { bonusToken: string }>;

    "getBonusTokenAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { bonusToken: string }>;

    getBonusTokenSetLength(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { length: BigNumber }>;

    "getBonusTokenSetLength()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { length: BigNumber }>;

    getLMRewardBonusTokenAt(
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { bonusToken: string; bonusTokenAmount: BigNumber }
    >;

    "getLMRewardBonusTokenAt(address,uint256)"(
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { bonusToken: string; bonusTokenAmount: BigNumber }
    >;

    getLMRewardBonusTokensLength(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { length: BigNumber }>;

    "getLMRewardBonusTokensLength(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { length: BigNumber }>;

    getLMRewardData(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        amount: BigNumber;
        duration: BigNumber;
        startedAt: BigNumber;
        rewardCalcInstance: string;
      }
    >;

    "getLMRewardData(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        amount: BigNumber;
        duration: BigNumber;
        startedAt: BigNumber;
        rewardCalcInstance: string;
      }
    >;

    getLMRewardVestingData(
      user: string,
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; startedAt: BigNumber }
    >;

    "getLMRewardVestingData(address,address,uint256)"(
      user: string,
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; startedAt: BigNumber }
    >;

    getNumTokensStaked(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { num: BigNumber }>;

    "getNumTokensStaked()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { num: BigNumber }>;

    getNumTokensStakedInVault(
      vault: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { num: BigNumber }>;

    "getNumTokensStakedInVault(address)"(
      vault: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { num: BigNumber }>;

    getNumVaults(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { num: BigNumber }>;

    "getNumVaults()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { num: BigNumber }>;

    getNumVestingLMTokenRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { num: BigNumber }>;

    "getNumVestingLMTokenRewards(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { num: BigNumber }>;

    getNumVests(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { num: BigNumber }>;

    "getNumVests(address,address)"(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { num: BigNumber }>;

    getTokenStakedAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { token: string }>;

    "getTokenStakedAt(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { token: string }>;

    getVaultAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { vault: string }>;

    "getVaultAt(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { vault: string }>;

    getVaultFactoryAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { factory: string }>;

    "getVaultFactoryAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { factory: string }>;

    getVaultFactorySetLength(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { length: BigNumber }>;

    "getVaultFactorySetLength()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { length: BigNumber }>;

    getVaultTokenAtIndex(
      vault: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { vaultToken: string }>;

    "getVaultTokenAtIndex(address,uint256)"(
      vault: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { vaultToken: string }>;

    getVaultTokenStake(
      vault: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenStake: BigNumber }>;

    "getVaultTokenStake(address,address)"(
      vault: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenStake: BigNumber }>;

    getVestingLMTokenAt(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { token: string }>;

    "getVestingLMTokenAt(address,uint256)"(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { token: string }>;

    isValidAddress(
      target: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { validity: boolean }>;

    "isValidAddress(address)"(
      target: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { validity: boolean }>;

    isValidVault(
      vault: string,
      factory: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { validity: boolean }>;

    "isValidVault(address,address)"(
      vault: string,
      factory: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { validity: boolean }>;

    rageQuit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "rageQuit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      vault: string,
      vaultFactory: string,
      token: string,
      amount: BigNumberish,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stake(address,address,address,uint256,bytes)"(
      vault: string,
      vaultFactory: string,
      token: string,
      amount: BigNumberish,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeAndClaim(
      vault: string,
      vaultFactory: string,
      recipient: string,
      token: string,
      amount: BigNumberish,
      claimBonusReward: boolean,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unstakeAndClaim(address,address,address,address,uint256,bool,bytes)"(
      vault: string,
      vaultFactory: string,
      recipient: string,
      token: string,
      amount: BigNumberish,
      claimBonusReward: boolean,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  "claimAirdropReward(address,uint256[])"(
    nftFactory: string,
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimAirdropReward(address)"(
    nftFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimVestedReward()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimVestedReward(address)"(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBonusTokenAtIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getBonusTokenAtIndex(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getBonusTokenSetLength(overrides?: CallOverrides): Promise<BigNumber>;

  "getBonusTokenSetLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  getLMRewardBonusTokenAt(
    token: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { bonusToken: string; bonusTokenAmount: BigNumber }
  >;

  "getLMRewardBonusTokenAt(address,uint256)"(
    token: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { bonusToken: string; bonusTokenAmount: BigNumber }
  >;

  getLMRewardBonusTokensLength(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getLMRewardBonusTokensLength(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLMRewardData(
    token: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string] & {
      amount: BigNumber;
      duration: BigNumber;
      startedAt: BigNumber;
      rewardCalcInstance: string;
    }
  >;

  "getLMRewardData(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string] & {
      amount: BigNumber;
      duration: BigNumber;
      startedAt: BigNumber;
      rewardCalcInstance: string;
    }
  >;

  getLMRewardVestingData(
    user: string,
    token: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; startedAt: BigNumber }
  >;

  "getLMRewardVestingData(address,address,uint256)"(
    user: string,
    token: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; startedAt: BigNumber }
  >;

  getNumTokensStaked(overrides?: CallOverrides): Promise<BigNumber>;

  "getNumTokensStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

  getNumTokensStakedInVault(
    vault: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNumTokensStakedInVault(address)"(
    vault: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumVaults(overrides?: CallOverrides): Promise<BigNumber>;

  "getNumVaults()"(overrides?: CallOverrides): Promise<BigNumber>;

  getNumVestingLMTokenRewards(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNumVestingLMTokenRewards(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumVests(
    user: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNumVests(address,address)"(
    user: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenStakedAt(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getTokenStakedAt(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getVaultAt(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "getVaultAt(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getVaultFactoryAtIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getVaultFactoryAtIndex(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getVaultFactorySetLength(overrides?: CallOverrides): Promise<BigNumber>;

  "getVaultFactorySetLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  getVaultTokenAtIndex(
    vault: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getVaultTokenAtIndex(address,uint256)"(
    vault: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getVaultTokenStake(
    vault: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getVaultTokenStake(address,address)"(
    vault: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVestingLMTokenAt(
    user: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getVestingLMTokenAt(address,uint256)"(
    user: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isValidAddress(target: string, overrides?: CallOverrides): Promise<boolean>;

  "isValidAddress(address)"(
    target: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidVault(
    vault: string,
    factory: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isValidVault(address,address)"(
    vault: string,
    factory: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  rageQuit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "rageQuit()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    vault: string,
    vaultFactory: string,
    token: string,
    amount: BigNumberish,
    permission: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stake(address,address,address,uint256,bytes)"(
    vault: string,
    vaultFactory: string,
    token: string,
    amount: BigNumberish,
    permission: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeAndClaim(
    vault: string,
    vaultFactory: string,
    recipient: string,
    token: string,
    amount: BigNumberish,
    claimBonusReward: boolean,
    permission: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unstakeAndClaim(address,address,address,address,uint256,bool,bytes)"(
    vault: string,
    vaultFactory: string,
    recipient: string,
    token: string,
    amount: BigNumberish,
    claimBonusReward: boolean,
    permission: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    "claimAirdropReward(address,uint256[])"(
      nftFactory: string,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claimAirdropReward(address)"(
      nftFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimVestedReward()"(overrides?: CallOverrides): Promise<void>;

    "claimVestedReward(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getBonusTokenAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getBonusTokenAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getBonusTokenSetLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getBonusTokenSetLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLMRewardBonusTokenAt(
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { bonusToken: string; bonusTokenAmount: BigNumber }
    >;

    "getLMRewardBonusTokenAt(address,uint256)"(
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { bonusToken: string; bonusTokenAmount: BigNumber }
    >;

    getLMRewardBonusTokensLength(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLMRewardBonusTokensLength(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLMRewardData(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        amount: BigNumber;
        duration: BigNumber;
        startedAt: BigNumber;
        rewardCalcInstance: string;
      }
    >;

    "getLMRewardData(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        amount: BigNumber;
        duration: BigNumber;
        startedAt: BigNumber;
        rewardCalcInstance: string;
      }
    >;

    getLMRewardVestingData(
      user: string,
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; startedAt: BigNumber }
    >;

    "getLMRewardVestingData(address,address,uint256)"(
      user: string,
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; startedAt: BigNumber }
    >;

    getNumTokensStaked(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumTokensStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNumTokensStakedInVault(
      vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumTokensStakedInVault(address)"(
      vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumVaults(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumVaults()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNumVestingLMTokenRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumVestingLMTokenRewards(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumVests(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumVests(address,address)"(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenStakedAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getTokenStakedAt(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getVaultAt(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "getVaultAt(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getVaultFactoryAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getVaultFactoryAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getVaultFactorySetLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getVaultFactorySetLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultTokenAtIndex(
      vault: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getVaultTokenAtIndex(address,uint256)"(
      vault: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getVaultTokenStake(
      vault: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVaultTokenStake(address,address)"(
      vault: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingLMTokenAt(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getVestingLMTokenAt(address,uint256)"(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isValidAddress(target: string, overrides?: CallOverrides): Promise<boolean>;

    "isValidAddress(address)"(
      target: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidVault(
      vault: string,
      factory: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isValidVault(address,address)"(
      vault: string,
      factory: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rageQuit(overrides?: CallOverrides): Promise<void>;

    "rageQuit()"(overrides?: CallOverrides): Promise<void>;

    stake(
      vault: string,
      vaultFactory: string,
      token: string,
      amount: BigNumberish,
      permission: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "stake(address,address,address,uint256,bytes)"(
      vault: string,
      vaultFactory: string,
      token: string,
      amount: BigNumberish,
      permission: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeAndClaim(
      vault: string,
      vaultFactory: string,
      recipient: string,
      token: string,
      amount: BigNumberish,
      claimBonusReward: boolean,
      permission: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "unstakeAndClaim(address,address,address,address,uint256,bool,bytes)"(
      vault: string,
      vaultFactory: string,
      recipient: string,
      token: string,
      amount: BigNumberish,
      claimBonusReward: boolean,
      permission: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    BonusTokenRegistered(
      token: null
    ): TypedEventFilter<[string], { token: string }>;

    BonusTokenRemoved(
      token: null
    ): TypedEventFilter<[string], { token: string }>;

    RageQuit(vault: null): TypedEventFilter<[string], { vault: string }>;

    RewardClaimed(
      vaultFactory: null,
      recipient: null,
      token: null,
      amount: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        vaultFactory: string;
        recipient: string;
        token: string;
        amount: BigNumber;
      }
    >;

    Staked(
      vault: null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { vault: string; amount: BigNumber }
    >;

    UniStakerCreated(
      rewardPool: null,
      powerSwitch: null
    ): TypedEventFilter<
      [string, string],
      { rewardPool: string; powerSwitch: string }
    >;

    UniStakerFunded(
      token: null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    Unstaked(
      vault: null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { vault: string; amount: BigNumber }
    >;

    VaultFactoryRegistered(
      factory: null
    ): TypedEventFilter<[string], { factory: string }>;

    VaultFactoryRemoved(
      factory: null
    ): TypedEventFilter<[string], { factory: string }>;

    VestedRewardClaimed(
      recipient: null,
      token: null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { recipient: string; token: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    "claimAirdropReward(address,uint256[])"(
      nftFactory: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimAirdropReward(address)"(
      nftFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimVestedReward()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimVestedReward(address)"(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBonusTokenAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBonusTokenAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBonusTokenSetLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getBonusTokenSetLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLMRewardBonusTokenAt(
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLMRewardBonusTokenAt(address,uint256)"(
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLMRewardBonusTokensLength(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLMRewardBonusTokensLength(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLMRewardData(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLMRewardData(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLMRewardVestingData(
      user: string,
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLMRewardVestingData(address,address,uint256)"(
      user: string,
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumTokensStaked(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumTokensStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNumTokensStakedInVault(
      vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumTokensStakedInVault(address)"(
      vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumVaults(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumVaults()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNumVestingLMTokenRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumVestingLMTokenRewards(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumVests(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumVests(address,address)"(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenStakedAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenStakedAt(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVaultAt(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultFactoryAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVaultFactoryAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultFactorySetLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getVaultFactorySetLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultTokenAtIndex(
      vault: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVaultTokenAtIndex(address,uint256)"(
      vault: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultTokenStake(
      vault: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVaultTokenStake(address,address)"(
      vault: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingLMTokenAt(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVestingLMTokenAt(address,uint256)"(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidAddress(
      target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValidAddress(address)"(
      target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidVault(
      vault: string,
      factory: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValidVault(address,address)"(
      vault: string,
      factory: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rageQuit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "rageQuit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      vault: string,
      vaultFactory: string,
      token: string,
      amount: BigNumberish,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stake(address,address,address,uint256,bytes)"(
      vault: string,
      vaultFactory: string,
      token: string,
      amount: BigNumberish,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeAndClaim(
      vault: string,
      vaultFactory: string,
      recipient: string,
      token: string,
      amount: BigNumberish,
      claimBonusReward: boolean,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unstakeAndClaim(address,address,address,address,uint256,bool,bytes)"(
      vault: string,
      vaultFactory: string,
      recipient: string,
      token: string,
      amount: BigNumberish,
      claimBonusReward: boolean,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "claimAirdropReward(address,uint256[])"(
      nftFactory: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimAirdropReward(address)"(
      nftFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimVestedReward()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimVestedReward(address)"(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBonusTokenAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBonusTokenAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBonusTokenSetLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBonusTokenSetLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLMRewardBonusTokenAt(
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLMRewardBonusTokenAt(address,uint256)"(
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLMRewardBonusTokensLength(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLMRewardBonusTokensLength(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLMRewardData(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLMRewardData(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLMRewardVestingData(
      user: string,
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLMRewardVestingData(address,address,uint256)"(
      user: string,
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumTokensStaked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNumTokensStaked()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumTokensStakedInVault(
      vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNumTokensStakedInVault(address)"(
      vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumVaults(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getNumVaults()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNumVestingLMTokenRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNumVestingLMTokenRewards(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumVests(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNumVests(address,address)"(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenStakedAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenStakedAt(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVaultAt(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultFactoryAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVaultFactoryAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultFactorySetLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVaultFactorySetLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultTokenAtIndex(
      vault: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVaultTokenAtIndex(address,uint256)"(
      vault: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultTokenStake(
      vault: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVaultTokenStake(address,address)"(
      vault: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingLMTokenAt(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVestingLMTokenAt(address,uint256)"(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidAddress(
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidAddress(address)"(
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidVault(
      vault: string,
      factory: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidVault(address,address)"(
      vault: string,
      factory: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rageQuit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "rageQuit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      vault: string,
      vaultFactory: string,
      token: string,
      amount: BigNumberish,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stake(address,address,address,uint256,bytes)"(
      vault: string,
      vaultFactory: string,
      token: string,
      amount: BigNumberish,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeAndClaim(
      vault: string,
      vaultFactory: string,
      recipient: string,
      token: string,
      amount: BigNumberish,
      claimBonusReward: boolean,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unstakeAndClaim(address,address,address,address,uint256,bool,bytes)"(
      vault: string,
      vaultFactory: string,
      recipient: string,
      token: string,
      amount: BigNumberish,
      claimBonusReward: boolean,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
