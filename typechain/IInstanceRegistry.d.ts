/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IInstanceRegistryInterface extends ethers.utils.Interface {
  functions: {
    "instanceAt(uint256)": FunctionFragment;
    "instanceCount()": FunctionFragment;
    "isInstance(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "instanceAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "instanceCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isInstance", values: [string]): string;

  decodeFunctionResult(functionFragment: "instanceAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "instanceCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isInstance", data: BytesLike): Result;

  events: {
    "InstanceAdded(address)": EventFragment;
    "InstanceRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InstanceAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstanceRemoved"): EventFragment;
}

export class IInstanceRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IInstanceRegistryInterface;

  functions: {
    instanceAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { instance: string }>;

    "instanceAt(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { instance: string }>;

    instanceCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    "instanceCount()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    isInstance(
      instance: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { validity: boolean }>;

    "isInstance(address)"(
      instance: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { validity: boolean }>;
  };

  instanceAt(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "instanceAt(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  instanceCount(overrides?: CallOverrides): Promise<BigNumber>;

  "instanceCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  isInstance(instance: string, overrides?: CallOverrides): Promise<boolean>;

  "isInstance(address)"(
    instance: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    instanceAt(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "instanceAt(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    instanceCount(overrides?: CallOverrides): Promise<BigNumber>;

    "instanceCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    isInstance(instance: string, overrides?: CallOverrides): Promise<boolean>;

    "isInstance(address)"(
      instance: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    InstanceAdded(
      instance: null
    ): TypedEventFilter<[string], { instance: string }>;

    InstanceRemoved(
      instance: null
    ): TypedEventFilter<[string], { instance: string }>;
  };

  estimateGas: {
    instanceAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "instanceAt(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    instanceCount(overrides?: CallOverrides): Promise<BigNumber>;

    "instanceCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    isInstance(instance: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isInstance(address)"(
      instance: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    instanceAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "instanceAt(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    instanceCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "instanceCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isInstance(
      instance: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isInstance(address)"(
      instance: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
